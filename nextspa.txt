https://colinhacks.com/essays/building-a-spa-with-nextjs

- create next app and intall react router and use colins ultra basic RR SPA
- next dev --->     ERROR::::    Invariant failed: Browser history needs a DOM

* Turns out this article assumes RR v5 and by defult installs now get v6 which does not
  have switch, for one thing. So I uninstall react-router-dom and then:
npm install react-router-dom@5

* Now a related topic .. Typescript was default selected and agreed Yes during CNA, BUT TS creates issues for RR:
https://www.pluralsight.com/guides/react-router-typescript
** To save time and solve TS linting issues later, use:
// @ts-ignore

NOW, RE the error:
"This happens because Next.js tries to pre-render your pages on the development server in development mode.
React Router, on the other hand, requires access to the global window object provided by the browser.
Because window isn't available in the server environment, React Router craps out."

**** SOLUTION! Make it a custom app. Add the file: /pages/_app.tsx OR /pages/_app.js if you are lazy and mediocre.)

The simple hack added to return null for the app when there is no window object solves the first error apparently
and gives us a new error. Correction, 3 errors. First two are same but with different call stacks.:
    ERROR 1 and 2::::    Error: Hydration failed because the initial UI does not match what was rendered on the server.
    ERROR 3::::    Error: There was an error while hydrating. Because the error happened outside of a Suspense
                          boundary, the entire root will switch to client rendering.

* Article actually tells us to expect a different error: "Expected server HTML to contain a matching div"
** Anyhow notice it says it is switching to client rendering which is exactly what was intended at the moment.

******** BUT HEY!! These are warnings in the browser window that you can close and then you will see that
    the React Router SPA is working !!!!
(Our errors are just different than the article. Perhaps we are showing a more generic version of the error.)

So we add a special FLAG for a warning suppression to the outer div in _app.tsx:
<div suppressHydrationWarning>
* * * Hmmm .. this does not seem to work as the article promises. Even after a dev server restart; no effect.




